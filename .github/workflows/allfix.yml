name: Build and Deploy GitBook

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '10'

      - name: Install GitBook
        run: |
          npm install -g gitbook-cli
          gitbook fetch 3.2.2

      - name: Create book.json with styles and plugins
        run: |
          cat << 'EOF' > book.json
          {
            "title": "Your Documentation",
            "plugins": [
              "-search",
              "fontsettings",
              "theme-default"
            ],
            "pluginsConfig": {
              "theme-default": {
                "scripts": ["styles/inject-icons.js"]
              },
              "fontsettings": {
                "theme": "white"
              }
            },
            "styles": {
              "website": "styles/website.css"
            }
          }
          EOF

      - name: Add Font Awesome and layout styles
        run: |
          mkdir -p styles
          cat << 'EOF' > styles/website.css
          @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');

          .markdown-section h1 i,
          .markdown-section h2 i,
          .markdown-section h3 i {
            margin-right: 8px;
            font-size: 1em;
            vertical-align: middle;
            color: #555;
          }

          iframe {
            display: block;
            margin: 20px auto;
            max-width: 100%;
          }

          .markdown-section blockquote {
            border-left: 4px solid #007acc;
            background: #f8f9fa;
            padding: 12px 16px;
            margin: 16px 0;
            border-radius: 4px;
          }

          .markdown-section blockquote p:first-child {
            margin-top: 0;
          }

          .markdown-section blockquote p:last-child {
            margin-bottom: 0;
          }
          EOF

      - name: Add icon injection script
        run: |
          cat << 'EOF' > styles/inject-icons.js
          document.addEventListener("DOMContentLoaded", function () {
            const iconMap = {
              "camcorder": "fa-video",
              "terminal": "fa-terminal",
              "rocket": "fa-rocket",
              "settings": "fa-cog",
              "book": "fa-book",
              "api": "fa-code",
              "code": "fa-file-code",
              "image": "fa-image",
              "video": "fa-video",
              "cart": "fa-shopping-cart",
              "search": "fa-magnifying-glass",
              "wishlist": "fa-heart",
              "filter": "fa-sliders",
              "bars": "fa-bars",
              "header": "fa-heading",
              "id-card-clip": "fa-id-card",
              "layer-minus": "fa-layer-group"
            };

            document.querySelectorAll(".summary a").forEach(link => {
              const href = link.getAttribute("href");
              const iconKey = href.replace(".html", "").toLowerCase();
              const faIcon = iconMap[iconKey];
              if (faIcon) {
                link.innerHTML = `<i class="fa-solid ${faIcon}"></i> ` + link.innerHTML;
              }
            });

            document.querySelectorAll(".markdown-section h1, .markdown-section h2").forEach(heading => {
              const text = heading.textContent.toLowerCase();
              for (const key in iconMap) {
                if (text.includes(key)) {
                  heading.innerHTML = `<i class="fa-solid ${iconMap[key]}"></i> ` + heading.innerHTML;
                  break;
                }
              }
            });
          });
          EOF

      - name: Preprocess markdown files (frontmatter, embeds, hints)
        run: |
          find . -type f -name "*.md" | while read -r file; do
            sed -i 's/{% hint style="[^"]*" %}/> **TIP:** /g' "$file"
            sed -i 's/{% hint %}/> **INFO:** /g' "$file"
            sed -i 's/{% endhint %}/\n/g' "$file"
            sed -i 's/{{[^}]*}}//g' "$file"

            awk '
              {
                if ($0 ~ /{% embed url="https:\/\/youtu\.be\/[^"]+" %}/) {
                  match($0, /{% embed url="https:\/\/youtu\.be\/([^"]+)" %}/, arr)
                  print "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/" arr[1] "\" frameborder=\"0\" allowfullscreen></iframe>"
                } else {
                  print $0
                }
              }
            ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"

            if ! grep -q '^---' "$file"; then
              icon=$(basename "$file" | sed 's/\.md$//' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
              echo -e "---\nicon: $icon\n---\n$(cat "$file")" > "$file"
            fi
          done

      - name: Build GitBook
        run: |
          gitbook install --verbose
          gitbook build --verbose

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_book
          force_orphan: true
