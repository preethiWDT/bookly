name: Build and Deploy GitBook

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '10'

      - name: Install GitBook
        run: |
          npm install -g gitbook-cli
          gitbook fetch 3.2.2

      - name: Validate and create missing files
        run: |
          if [ ! -f "SUMMARY.md" ]; then
            echo "# Summary" > SUMMARY.md
            echo "" >> SUMMARY.md
            for file in *.md; do
              if [ "$file" != "README.md" ] && [ "$file" != "SUMMARY.md" ]; then
                title=$(echo "$file" | sed 's/\.md$//' | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
                echo "* [$title]($file)" >> SUMMARY.md
              fi
            done
          fi

          if [ -f "SUMMARY.md" ]; then
            grep -o '\[.*\](.*\.md)' SUMMARY.md | sed 's/.*(\(.*\.md\)).*/\1/' | while read file; do
              if [ ! -f "$file" ]; then
                echo "Creating missing file: $file"
                title=$(echo "$file" | sed 's/\.md$//' | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
                echo "# $title" > "$file"
                echo "" >> "$file"
                echo "This page is under construction." >> "$file"
              fi
            done
          fi

      - name: Create book.json with styles and plugins
        run: |
          cat << 'EOF' > book.json
          {
            "title": "Your Documentation",
            "plugins": [
              "-search",
              "fontsettings",
              "theme-default"
            ],
            "pluginsConfig": {
              "fontsettings": {
                "theme": "white"
              }
            },
            "styles": {
              "website": "styles/website.css"
            }
          }
          EOF

      - name: Preprocess markdown files
        run: |
          find . -name "*.md" -type f -exec sed -i 's/{% hint style="[^"]*" %}/> **TIP:** /g' {} \;
          find . -name "*.md" -type f -exec sed -i 's/{% hint %}/> **INFO:** /g' {} \;
          find . -name "*.md" -type f -exec sed -i 's/{% endhint %}/\n/g' {} \;
          find . -name "*.md" -type f -exec sed -i 's/{%[^%]*%}//g' {} \;
          find . -name "*.md" -type f -exec sed -i 's/{{[^}]*}}//g' {} \;

      - name: Auto-generate icon frontmatter and inject mapped Font Awesome icons
        run: |
          declare -A icon_map=(
            [camcorder]="video"
            [terminal]="terminal"
            [rocket]="rocket"
            [settings]="cog"
            [book]="book"
            [api]="code"
            [code]="file-code"
            [image]="image"
            [video]="video"
            [cart]="shopping-cart"
            [search]="magnifying-glass"
            [wishlist]="heart"
            [filter]="sliders"
            [bars]="bars"
            [header]="heading"
          )

          find . -type f -name "*.md" | while read -r file; do
            # Ensure frontmatter exists
            if ! grep -q '^---' "$file"; then
              icon=$(basename "$file" | sed 's/\.md$//' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
              echo -e "---\nicon: $icon\n---\n$(cat "$file")" > "$file"
              echo "Added frontmatter with icon: $icon to $file"
            fi

            # Extract and map icon
            raw_icon=$(grep -m1 '^icon:' "$file" | awk -F': ' '{print $2}')
            mapped_icon=${icon_map[$raw_icon]:-$raw_icon}

            # Inject Font Awesome icon with layout wrapper
            if [ -n "$mapped_icon" ] && ! grep -q "fa-solid fa-$mapped_icon" "$file"; then
              awk -v icn="$mapped_icon" '
                BEGIN {in_yaml=0}
                /^---/ {
                  if(in_yaml==1){
                    print $0
                    print "<div class=\"icon-block\">\n<i class=\"fa-solid fa-" icn "\"></i>\n</div>\n"
                  }
                  in_yaml = !in_yaml
                  next
                }
                {print}
              ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
              echo "Injected mapped icon $mapped_icon into $file"
            fi
          done

      - name: Add Font Awesome, layout styles, and search bar
        run: |
          mkdir -p styles
          cat << 'EOF' > styles/website.css
          @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');

          .icon-block {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 12px;
          }

          .icon-block i {
            font-size: 1.2em;
            color: #333;
          }

          .markdown-section blockquote {
            border-left: 4px solid #007acc;
            background: #f8f9fa;
            padding: 12px 16px;
            margin: 16px 0;
            border-radius: 4px;
          }

          .markdown-section blockquote p:first-child {
            margin-top: 0;
          }

          .markdown-section blockquote p:last-child {
            margin-bottom: 0;
          }

          #search-box {
            margin: 20px 0;
            padding: 8px;
            width: 100%;
            max-width: 400px;
            font-size: 16px;
          }
          EOF

          echo '<input type="text" id="search-box" placeholder="Search docs...">' >> README.md
          echo '<script src="https://cdnjs.cloudflare.com/ajax/libs/lunr.js/2.3.9/lunr.min.js"></script>' >> README.md
          echo '<script>/* Lunr search logic can be added here */</script>' >> README.md

      - name: Build GitBook
        run: |
          gitbook install --verbose
          gitbook build --verbose

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_book
          force_orphan: true
